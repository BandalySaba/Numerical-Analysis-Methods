import numpy as np

def gaussianQuad2D(f, a, b, c, d, n, m):

    coeff = np.zeros((4, 5))
    int_pts = np.zeros((4, 5))
    
    #n=2
    coeff[0,:] = [1.000000, 1.000000, 0.000000, 0.000000, 0.000000]
    int_pts[0,:] = [-0.577350, 0.577350, 0.000000, 0.000000, 0.000000]
    
    #n=3
    coeff[1,:] = [0.555556, 0.888889, 0.555556, 0.000000, 0.000000]
    int_pts[1,:] = [-0.774597, 0.000000, 0.774597, 0.000000, 0.000000]
    
    #n=4
    coeff[2,:] = [0.347855, 0.652145, 0.652145, 0.347855, 0.000000]
    int_pts[2,:] = [-0.861136, -0.339981, 0.339981, 0.861136, 0.000000]
    
    #n=5:
    coeff[3,:] = [0.236927, 0.478629, 0.568889, 0.478629, 0.236927]
    int_pts[3,:] = [-0.906180, -0.538469, 0.000000, 0.538469, 0.906180]

    
    g = lambda x,v: f(x,(d(x)+c(x))/2 + (d(x)-c(x))*0.5 * v)*(d(x)-c(x))*0.5 
    
    h = lambda u,v: g( (b + a)/2 + (b - a)/2 * u, v) * (b-a)*0.5
    
    l=0.0    
    
    for i in range(n):
        for j in range(m):
            l += coeff[n-2, i] * coeff[m-2,j] * h(int_pts[n-2,i], int_pts[m-2,j])
    return l